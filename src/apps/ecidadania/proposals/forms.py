# -*- coding: utf-8 -*-
#
# Copyright (c) 2010-2012 Cidadania S. Coop. Galega
#
# This file is part of e-cidadania.
#
# e-cidadania is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# e-cidadania is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with e-cidadania. If not, see <http://www.gnu.org/licenses/>.

"""
Proposal forms.
"""


from django.forms import ModelForm, forms
from django.core import validators
from django.contrib.auth.models import User

from apps.ecidadania.proposals.models import Proposal, ProposalSet, ProposalField
from apps.ecidadania.debate.models import Debate

import datetime

class ProposalSetForm(ModelForm):

    """
    ProposalSetForm is a basic form autogenerated form from ProposalSet model
    """
    class Meta:
        model = ProposalSet
    
    def __init__(self, *args, **kwargs):
        super(ProposalSetForm, self).__init__(*args, **kwargs)
        if self.instance:
            self.fields['debate'].queryset = Debate.objects.filter(end_date__lte=datetime.date.today())

class ProposalForm(ModelForm):

    """
    ProposalForm is a basic form autogenerated form for Proposal model.
    """
    class Meta:
        model = Proposal
        exclude = ('contenttype','object_pk','content_object')

class VoteProposal(ModelForm):

    """
    asd
    """
    class Meta:
        model = Proposal
        exclude = ('code', 'title', 'description', 'space', 'author', 'tags',
                   'latitude', 'longitude', 'closed', 'closed_by', 'close_reason',
                   'anon_allowed', 'refurbished', 'budget', 'pub_date', 'mod_date','content_type','object_pk','content_object' )

class ProposalFieldForm(ModelForm):

    """
    ProposalFieldForm is a basic form autogenerated from ProposalField model
    """

    class Meta:
        model = ProposalField

    def clean(self):
        cleaned_data = super(ProposalFieldForm, self).clean()
        field_set = []
        p_set = cleaned_data.get("proposalset")
        f_name = cleaned_data.get("field_name")
        proposal_sets = ProposalField.objects.filter(proposalset=p_set) 
        for p in proposal_sets:
            field_set.append(p.field_name)
        if f_name in field_set:
            raise forms.ValidationError("This Field has be already added")
        else:
            return cleaned_data


class ProposalFieldDeleteForm(ModelForm):
    
    """
    ProposalFieldDeleteForm is a basic form autogenerated from ProposalField model 
    """

    class Meta:
        model = ProposalField


class ProposalSetSelectForm(ModelForm):
    
    """
    ProposalSetSelectForm is a basic form autogenerated from ProposalField model.
    """
    
    class Meta:
        model = ProposalField
        exclude = ('field_name')
